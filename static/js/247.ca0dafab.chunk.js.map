{"version":3,"file":"static/js/247.ca0dafab.chunk.js","mappings":"8SAEMA,EAAU,mCAGHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,kEACsCF,IAF/B,uBACtBG,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qDAQhBC,EAAiB,mCAAG,WAAOC,EAAMC,GAAb,yFACRJ,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,gCAC+DK,EAD/D,kBAC6EC,IAFrE,uBACvBH,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,wDAOjBI,EAAU,mCAAG,WAAMC,GAAN,yFACDN,EAAAA,EAAAA,IAAA,6CACiBO,OAAOD,GADxB,oBACuCR,EADvC,oBADC,uBAChBG,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVO,EAAS,mCAAG,WAAMF,GAAN,yFACAN,EAAAA,EAAAA,IAAA,6CACiBO,OACpCD,GAFmB,4BAGAR,EAHA,oBADA,uBACfG,EADe,EACfA,KADe,kBAMhBA,GANgB,2CAAH,sDASTQ,EAAW,mCAAG,WAAMH,GAAN,yFACFN,EAAAA,EAAAA,IAAA,6CACiBO,OACpCD,GAFmB,4BAGAR,EAHA,oBADE,uBACjBG,EADiB,EACjBA,KADiB,kBAMlBA,GANkB,2CAAH,qD,wJC/BT,SAASS,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBN,OAhBFE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfN,GAAa,GACbE,GAAS,GAHM,UAIOT,EAAAA,EAAAA,GAAUU,GAJjB,OAITI,EAJS,OAKfT,EAAUS,EAAQC,MALH,gDAOfN,GAAS,GAPM,yBASfF,GAAa,GATE,4EAAH,qDAahBM,GACD,GAAE,CAACH,KAEA,gCACGJ,IAAa,SAAC,IAAD,IACbE,IAAS,kEACRF,IAAcE,GAA2B,IAAlBJ,EAAOY,SAC9B,qFAEAV,IAAcE,GAASJ,EAAOY,OAAS,IACvC,wBACGZ,EAAOa,KAAI,SAAAC,GACV,OACE,0BACGA,EAAMC,eACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAI,MAGNH,EAAMC,eACN,gBACEG,MAAM,MACNC,OAAO,MACPH,IAAG,2HACHC,IAAI,MAIR,uBAAIH,EAAMM,QACV,sCAAcN,EAAMO,eAjBbP,EAAMpB,GAoBlB,QAKZ,C","sources":["api.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'c0cdc1a14e8a53ae3d25369920c09f3b';\n// axios.defaults.baseURL = 'https://developers.themoviedb.org/3/';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    // `https://api.themoviedb.org/3/search/movie?api_key=c0cdc1a14e8a53ae3d25369920c09f3b&language=en-US&query=batman&page=1`\n  );\n  return data;\n};\n\nexport const fetchSearchMovies = async (page, query) => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}`\n  );\n  return data;\n};\n\nexport const fetchMovie = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${Number(id)}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchCast = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${Number(\n      id\n    )}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchReview = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${Number(\n      id\n    )}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchCast } from 'api';\nimport Loader from 'components/Loader/Loader';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCasts = async () => {\n      try {\n        setIsLoading(true);\n        setError(false);\n        const results = await fetchCast(movieId);\n        setActors(results.cast);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCasts();\n  }, [movieId]);\n    return (\n      <>\n        {isLoading && <Loader />}\n        {error && <p>Something went wrong, reload the page</p>}\n        {!isLoading && !error && actors.length === 0 && (\n          <p>Unfortunately, there is no information about the actors.</p>\n        )}\n        {!isLoading && !error && actors.length > 0 && (\n          <ul>\n            {actors.map(actor => {\n              return (\n                <li key={actor.id}>\n                  {actor.profile_path && (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                      alt=\"\"\n                    />\n                  )}\n                  {!actor.profile_path && (\n                    <img\n                      width=\"200\"\n                      height=\"300\"\n                      src={`https://kartinki.pibig.info/uploads/posts/2023-04/1681549820_kartinki-pibig-info-p-zaglushka-kartinka-arti-krasivo-2.jpg`}\n                      alt=\"\"\n                    />\n                  )}\n\n                  <p>{actor.name}</p>\n                  <p>Character {actor.character}</p>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </>\n    );\n}\n"],"names":["API_KEY","fetchTrendMovies","axios","data","fetchSearchMovies","page","query","fetchMovie","id","Number","fetchCast","fetchReview","Cast","useState","actors","setActors","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchCasts","results","cast","length","map","actor","profile_path","src","alt","width","height","name","character"],"sourceRoot":""}
{"version":3,"file":"static/js/473.374570ba.chunk.js","mappings":"gRAKe,SAASA,IAAgB,IAAD,IACrC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,WAAS,GAAnC,eAAOO,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAkBpD,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,oGAElBZ,GAAa,GACbE,GAAS,GAHS,UAIIW,EAAAA,EAAAA,IAAWV,GAJf,OAIZW,EAJY,OAKlBlB,EAASkB,GACThB,EAAU,kCAAD,OAAmCgB,EAAQC,cANlC,kDAQlBb,GAAS,GARS,yBAUlBF,GAAa,GAVK,6EAAH,qDAcnBY,GACD,GAAE,CAACT,KAEF,gCACGJ,IAAa,SAAC,IAAD,IACbE,IAAS,kEACRF,IAAcE,IACd,iCACE,wBACE,SAAC,KAAD,CAAMe,GAAIT,EAAaU,QAAvB,uBAEDtB,EAAMoB,cAAe,gBAAKG,IAAKrB,EAAQsB,IAAI,MAC1CxB,EAAMoB,cACN,gBACEG,IAAI,2HACJC,IAAI,GACJC,MAAM,MACNC,OAAO,SAGX,iCACE,0BACG1B,EAAM2B,MADT,KAEG3B,EAAM4B,cAAgB5B,EAAM4B,aAAaC,MAAM,EAAG,GAFrD,QAIA,uCACc,IACX7B,EAAM8B,cAAgBC,KAAKC,MAA2B,GAArBhC,EAAM8B,cAF1C,QAIA,sCACA,uBAAI9B,EAAMiC,YACV,oCACA,uBACGjC,EAAMkC,QAAUlC,EAAMkC,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,SAE9D,2BACE,yBACE,SAAC,KAAD,CAAMjB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,YAMX,C,8LC3EKkB,EAAU,mCAGHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,kEACsCF,IAF/B,uBACtBG,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qDAQhBC,EAAiB,mCAAG,WAAOC,EAAMC,GAAb,yFACRJ,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,gCAC+DK,EAD/D,kBAC6EC,IAFrE,uBACvBH,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,wDAOjBxB,EAAU,mCAAG,WAAM4B,GAAN,yFACDL,EAAAA,EAAAA,IAAA,6CACiBM,OAAOD,GADxB,oBACuCP,EADvC,oBADC,uBAChBG,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVM,EAAS,mCAAG,WAAMF,GAAN,yFACAL,EAAAA,EAAAA,IAAA,6CACiBM,OACpCD,GAFmB,4BAGAP,EAHA,oBADA,uBACfG,EADe,EACfA,KADe,kBAMhBA,GANgB,2CAAH,sDASTO,EAAW,mCAAG,WAAMH,GAAN,yFACFL,EAAAA,EAAAA,IAAA,6CACiBM,OACpCD,GAFmB,4BAGAP,EAHA,oBADE,uBACjBG,EADiB,EACjBA,KADiB,kBAMlBA,GANkB,2CAAH,qD","sources":["Pages/MovieDetails.jsx","api.js"],"sourcesContent":["import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovie } from 'api';\nimport Loader from 'components/Loader/Loader';\nimport { useState, useEffect, useRef } from 'react';\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState([]);\n  const [poster, setPoster] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n  useEffect(() => {\n    const fetchOneMovie = async () => {\n      try {\n        setIsLoading(true);\n        setError(false);\n        const results = await fetchMovie(movieId);\n        setMovie(results);\n        setPoster(`https://image.tmdb.org/t/p/w400${results.poster_path}`);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchOneMovie();\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Something went wrong, reload the page</p>}\n      {!isLoading && !error && (\n        <>\n          <p>\n            <Link to={backLinkHref.current}>Go Back</Link>\n          </p>\n          {movie.poster_path && <img src={poster} alt=\"\" />}\n          {!movie.poster_path && (\n            <img\n              src=\"https://kartinki.pibig.info/uploads/posts/2023-04/1681549820_kartinki-pibig-info-p-zaglushka-kartinka-arti-krasivo-2.jpg\"\n              alt=\"\"\n              width=\"400\"\n              height=\"600\"\n            />\n          )}\n          <>\n            <h1>\n              {movie.title} (\n              {movie.release_date && movie.release_date.slice(0, 4)})\n            </h1>\n            <p>\n              User Score:{' '}\n              {movie.vote_average && Math.round(movie.vote_average * 10)}%\n            </p>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n            <h3>Genres</h3>\n            <p>\n              {movie.genres && movie.genres.map(genre => genre.name).join(', ')}\n            </p>\n            <ul>\n              <li>\n                <Link to=\"cast\">Cast</Link>\n              </li>\n              <li>\n                <Link to=\"reviews\">Reviews</Link>\n              </li>\n            </ul>\n            <Outlet />\n          </>\n        </>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = 'c0cdc1a14e8a53ae3d25369920c09f3b';\n// axios.defaults.baseURL = 'https://developers.themoviedb.org/3/';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    // `https://api.themoviedb.org/3/search/movie?api_key=c0cdc1a14e8a53ae3d25369920c09f3b&language=en-US&query=batman&page=1`\n  );\n  return data;\n};\n\nexport const fetchSearchMovies = async (page, query) => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}`\n  );\n  return data;\n};\n\nexport const fetchMovie = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${Number(id)}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchCast = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${Number(\n      id\n    )}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchReview = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${Number(\n      id\n    )}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};"],"names":["MovieDetails","useState","movie","setMovie","poster","setPoster","isLoading","setIsLoading","error","setError","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchOneMovie","fetchMovie","results","poster_path","to","current","src","alt","width","height","title","release_date","slice","vote_average","Math","round","overview","genres","map","genre","name","join","API_KEY","fetchTrendMovies","axios","data","fetchSearchMovies","page","query","id","Number","fetchCast","fetchReview"],"sourceRoot":""}